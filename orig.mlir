#blocked = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [8, 1], instrShape = [16, 256, 16]}>
#shared = #ttg.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = true}>
#shared1 = #ttg.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = true}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel_persistent(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %false = arith.constant false loc(#loc1)
    %cst = arith.constant dense<0> : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c132_i32 = arith.constant 132 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xf16, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x256xf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128x256xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c127_i32 : i32 loc(#loc80)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc81)
    %3 = arith.addi %arg4, %c255_i32 : i32 loc(#loc82)
    %4 = arith.divsi %3, %c256_i32 : i32 loc(#loc83)
    %5 = arith.addi %arg5, %c63_i32 : i32 loc(#loc84)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc85)
    %7 = arith.muli %2, %4 : i32 loc(#loc8)
    %8 = arith.divsi %7, %c132_i32 : i32 loc(#loc9)
    %9 = arith.remsi %7, %c132_i32 : i32 loc(#loc10)
    %10 = arith.cmpi slt, %0, %9 : i32 loc(#loc11)
    %11 = scf.if %10 -> (i32) {
      %122 = arith.addi %8, %c1_i32 : i32 loc(#loc13)
      scf.yield %122 : i32 loc(#loc13)
    } else {
      scf.yield %8 : i32 loc(#loc1)
    } loc(#loc12)
    %12 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc14)
    %13 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc14)
    %14 = arith.muli %4, %c8_i32 : i32 loc(#loc15)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc16)
    %16 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc16)
    %17 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc17)
    %18 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc17)
    %19 = arith.muli %6, %11 : i32 loc(#loc18)
    %20 = arith.subi %6, %c1_i32 : i32 loc(#loc19)
    %21 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc20)
    %22 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #blocked1> loc(#loc21)
    %23 = tt.splat %arg7 : i32 -> tensor<1x256xi32, #blocked> loc(#loc22)
    %24 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x256x!tt.ptr<f16>, #blocked> loc(#loc23)
    %25 = tt.expand_dims %12 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc24)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc25)
    %27 = ttg.local_alloc  : () -> !ttg.memdesc<3x128x64xf16, #shared, #smem, mutable> loc(#loc26)
    %28 = ttg.local_alloc  : () -> !ttg.memdesc<3x64x256xf16, #shared1, #smem, mutable> loc(#loc27)
    %29 = arith.cmpi sgt, %19, %c0_i32 : i32 loc(#loc28)
    %30 = arith.divsi %0, %14 : i32 loc(#loc29)
    %31 = arith.muli %30, %c8_i32 : i32 loc(#loc30)
    %32 = arith.subi %2, %31 : i32 loc(#loc31)
    %33 = arith.minsi %32, %c8_i32 : i32 loc(#loc32)
    %34 = arith.remsi %0, %33 : i32 loc(#loc33)
    %35 = arith.addi %31, %34 : i32 loc(#loc34)
    %36 = arith.remsi %0, %14 : i32 loc(#loc35)
    %37 = arith.divsi %36, %33 : i32 loc(#loc36)
    %38 = arith.muli %35, %c128_i32 : i32 loc(#loc37)
    %39 = arith.muli %37, %c256_i32 : i32 loc(#loc38)
    %40 = tt.splat %38 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc39)
    %41 = arith.addi %40, %15 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc39)
    %42 = tt.splat %39 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc40)
    %43 = arith.addi %42, %17 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc40)
    %44 = tt.splat %arg3 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc41)
    %45 = arith.cmpi slt, %41, %44 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc41)
    %46 = arith.select %45, %41, %cst_0 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi1, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc42)
    %47 = tt.splat %arg4 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc43)
    %48 = arith.cmpi slt, %43, %47 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc43)
    %49 = arith.select %48, %43, %cst {tt.contiguity = dense<256> : tensor<1xi32>, tt.divisibility = dense<256> : tensor<1xi32>} : tensor<256xi1, #ttg.slice<{dim = 0, parent = #blocked}>>, tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc44)
    %50 = tt.expand_dims %46 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc45)
    %51 = arith.muli %50, %21 : tensor<128x1xi32, #blocked1> loc(#loc20)
    %52 = tt.broadcast %51 : tensor<128x1xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc46)
    %53 = tt.broadcast %25 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc46)
    %54 = arith.addi %52, %53 : tensor<128x64xi32, #blocked1> loc(#loc46)
    %55 = tt.addptr %22, %54 : tensor<128x64x!tt.ptr<f16>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc21)
    %56 = tt.expand_dims %49 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc47)
    %57 = arith.muli %56, %23 : tensor<1x256xi32, #blocked> loc(#loc22)
    %58 = tt.broadcast %26 : tensor<64x1xi32, #blocked> -> tensor<64x256xi32, #blocked> loc(#loc48)
    %59 = tt.broadcast %57 : tensor<1x256xi32, #blocked> -> tensor<64x256xi32, #blocked> loc(#loc48)
    %60 = arith.addi %58, %59 : tensor<64x256xi32, #blocked> loc(#loc48)
    %61 = tt.addptr %24, %60 : tensor<64x256x!tt.ptr<f16>, #blocked>, tensor<64x256xi32, #blocked> loc(#loc23)
    %62 = tt.splat %arg5 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc49)
    %63 = arith.cmpi slt, %25, %62 : tensor<1x64xi32, #blocked1> loc(#loc49)
    %64 = tt.broadcast %63 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc26)
    %65 = ttg.memdesc_subview %27[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 3x128x64> loc(#loc26)
    %66 = tt.splat %29 : i1 -> tensor<128x64xi1, #blocked1> loc(#loc28)
    %67 = arith.andi %66, %64 : tensor<128x64xi1, #blocked1> loc(#loc28)
    %68 = ttg.async_copy_global_to_local %55, %65 mask %67 other %cst_1 : tensor<128x64x!tt.ptr<f16>, #blocked1> -> <128x64xf16, #shared, #smem, mutable, 3x128x64> loc(#loc26)
    %69 = ttg.async_commit_group %68 loc(#loc26)
    %70 = tt.splat %arg5 : i32 -> tensor<64x1xi32, #blocked> loc(#loc50)
    %71 = arith.cmpi slt, %26, %70 : tensor<64x1xi32, #blocked> loc(#loc50)
    %72 = tt.broadcast %71 : tensor<64x1xi1, #blocked> -> tensor<64x256xi1, #blocked> loc(#loc27)
    %73 = ttg.memdesc_subview %28[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable, 3x64x256> loc(#loc27)
    %74 = tt.splat %29 : i1 -> tensor<64x256xi1, #blocked> loc(#loc28)
    %75 = arith.andi %74, %72 : tensor<64x256xi1, #blocked> loc(#loc28)
    %76 = ttg.async_copy_global_to_local %61, %73 mask %75 other %cst_2 : tensor<64x256x!tt.ptr<f16>, #blocked> -> <64x256xf16, #shared1, #smem, mutable, 3x64x256> loc(#loc27)
    %77 = ttg.async_commit_group %76 loc(#loc27)
    %78 = arith.cmpi sgt, %19, %c1_i32 : i32 loc(#loc28)
    %79 = arith.cmpi ne, %20, %c0_i32 : i32 loc(#loc86)
    %80 = arith.extui %79 : i1 to i32 loc(#loc51)
    %81 = arith.cmpi eq, %80, %c0_i32 : i32 loc(#loc53)
    %82:5 = scf.if %81 -> (i32, i32, i32, tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>>) {
      %122 = arith.addi %0, %c132_i32 : i32 loc(#loc55)
      %123 = arith.divsi %122, %14 : i32 loc(#loc29)
      %124 = arith.muli %123, %c8_i32 : i32 loc(#loc30)
      %125 = arith.subi %2, %124 : i32 loc(#loc31)
      %126 = arith.minsi %125, %c8_i32 : i32 loc(#loc32)
      %127 = arith.remsi %122, %126 : i32 loc(#loc33)
      %128 = arith.addi %124, %127 : i32 loc(#loc34)
      %129 = arith.remsi %122, %14 : i32 loc(#loc35)
      %130 = arith.divsi %129, %126 : i32 loc(#loc36)
      %131 = arith.muli %128, %c128_i32 : i32 loc(#loc37)
      %132 = arith.muli %130, %c256_i32 : i32 loc(#loc38)
      %133 = tt.splat %131 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc39)
      %134 = arith.addi %133, %15 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc39)
      %135 = tt.splat %132 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc40)
      %136 = arith.addi %135, %17 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc40)
      %137 = arith.cmpi slt, %134, %44 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc41)
      %138 = arith.select %137, %134, %cst_0 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi1, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc42)
      %139 = arith.cmpi slt, %136, %47 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc43)
      %140 = arith.select %139, %136, %cst {tt.contiguity = dense<256> : tensor<1xi32>, tt.divisibility = dense<256> : tensor<1xi32>} : tensor<256xi1, #ttg.slice<{dim = 0, parent = #blocked}>>, tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc44)
      scf.yield %122, %128, %130, %138, %140 : i32, i32, i32, tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc44)
    } else {
      scf.yield %0, %35, %37, %46, %49 : i32, i32, i32, tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    } loc(#loc54)
    %83 = arith.muli %80, %c64_i32 : i32 loc(#loc56)
    %84 = tt.splat %83 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc57)
    %85 = tt.splat %83 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc57)
    %86 = arith.addi %84, %12 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc57)
    %87 = arith.addi %85, %13 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc57)
    %88 = tt.expand_dims %82#3 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc45)
    %89 = arith.muli %88, %21 : tensor<128x1xi32, #blocked1> loc(#loc20)
    %90 = tt.expand_dims %86 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc58)
    %91 = tt.broadcast %89 : tensor<128x1xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc46)
    %92 = tt.broadcast %90 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc46)
    %93 = arith.addi %91, %92 : tensor<128x64xi32, #blocked1> loc(#loc46)
    %94 = tt.addptr %22, %93 : tensor<128x64x!tt.ptr<f16>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc21)
    %95 = tt.expand_dims %87 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc59)
    %96 = tt.expand_dims %82#4 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc47)
    %97 = arith.muli %96, %23 : tensor<1x256xi32, #blocked> loc(#loc22)
    %98 = tt.broadcast %95 : tensor<64x1xi32, #blocked> -> tensor<64x256xi32, #blocked> loc(#loc48)
    %99 = tt.broadcast %97 : tensor<1x256xi32, #blocked> -> tensor<64x256xi32, #blocked> loc(#loc48)
    %100 = arith.addi %98, %99 : tensor<64x256xi32, #blocked> loc(#loc48)
    %101 = tt.addptr %24, %100 : tensor<64x256x!tt.ptr<f16>, #blocked>, tensor<64x256xi32, #blocked> loc(#loc23)
    %102 = arith.subi %arg5, %83 : i32 loc(#loc60)
    %103 = tt.splat %102 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc49)
    %104 = arith.cmpi slt, %25, %103 : tensor<1x64xi32, #blocked1> loc(#loc49)
    %105 = tt.broadcast %104 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc26)
    %106 = ttg.memdesc_subview %27[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 3x128x64> loc(#loc26)
    %107 = tt.splat %78 : i1 -> tensor<128x64xi1, #blocked1> loc(#loc28)
    %108 = arith.andi %107, %105 : tensor<128x64xi1, #blocked1> loc(#loc28)
    %109 = ttg.async_copy_global_to_local %94, %106 mask %108 other %cst_1 : tensor<128x64x!tt.ptr<f16>, #blocked1> -> <128x64xf16, #shared, #smem, mutable, 3x128x64> loc(#loc26)
    %110 = ttg.async_commit_group %109 loc(#loc26)
    %111 = tt.splat %102 : i32 -> tensor<64x1xi32, #blocked> loc(#loc50)
    %112 = arith.cmpi slt, %26, %111 : tensor<64x1xi32, #blocked> loc(#loc50)
    %113 = tt.broadcast %112 : tensor<64x1xi1, #blocked> -> tensor<64x256xi1, #blocked> loc(#loc27)
    %114 = ttg.memdesc_subview %28[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable, 3x64x256> loc(#loc27)
    %115 = tt.splat %78 : i1 -> tensor<64x256xi1, #blocked> loc(#loc28)
    %116 = arith.andi %115, %113 : tensor<64x256xi1, #blocked> loc(#loc28)
    %117 = ttg.async_copy_global_to_local %101, %114 mask %116 other %cst_2 : tensor<64x256x!tt.ptr<f16>, #blocked> -> <64x256xf16, #shared1, #smem, mutable, 3x64x256> loc(#loc27)
    %118 = ttg.async_commit_group %117 loc(#loc27)
    %119:18 = scf.for %arg9 = %c0_i32 to %19 step %c1_i32 iter_args(%arg10 = %80, %arg11 = %82#0, %arg12 = %82#1, %arg13 = %82#2, %arg14 = %cst_3, %arg15 = %82#3, %arg16 = %82#4, %arg17 = %false, %arg18 = %c1_i32, %arg19 = %c-1_i32, %arg20 = %77, %arg21 = %118, %arg22 = %c0_i32, %arg23 = %80, %arg24 = %35, %arg25 = %82#1, %arg26 = %37, %arg27 = %82#2) -> (i32, i32, i32, i32, tensor<128x256xf32, #mma>, tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>>, i1, i32, i32, !ttg.async.token, !ttg.async.token, i32, i32, i32, i32, i32, i32)  : i32 {
      %122 = arith.subi %19, %c2_i32 : i32 loc(#loc28)
      %123 = arith.cmpi slt, %arg9, %122 : i32 loc(#loc28)
      %124 = arith.cmpi eq, %arg10, %20 : i32 loc(#loc52)
      %125 = arith.addi %arg10, %c1_i32 : i32 loc(#loc61)
      %126 = arith.select %124, %c0_i32, %125 : i32 loc(#loc51)
      %127 = arith.cmpi eq, %126, %c0_i32 : i32 loc(#loc53)
      %128:5 = scf.if %127 -> (i32, i32, i32, tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>>) {
        %178 = arith.addi %arg11, %c132_i32 : i32 loc(#loc55)
        %179 = arith.divsi %178, %14 : i32 loc(#loc29)
        %180 = arith.muli %179, %c8_i32 : i32 loc(#loc30)
        %181 = arith.subi %2, %180 : i32 loc(#loc31)
        %182 = arith.minsi %181, %c8_i32 : i32 loc(#loc32)
        %183 = arith.remsi %178, %182 : i32 loc(#loc33)
        %184 = arith.addi %180, %183 : i32 loc(#loc34)
        %185 = arith.remsi %178, %14 : i32 loc(#loc35)
        %186 = arith.divsi %185, %182 : i32 loc(#loc36)
        %187 = arith.muli %184, %c128_i32 : i32 loc(#loc37)
        %188 = arith.muli %186, %c256_i32 : i32 loc(#loc38)
        %189 = tt.splat %187 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc39)
        %190 = arith.addi %189, %15 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc39)
        %191 = tt.splat %188 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc40)
        %192 = arith.addi %191, %17 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc40)
        %193 = arith.cmpi slt, %190, %44 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc41)
        %194 = arith.select %193, %190, %cst_0 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi1, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc42)
        %195 = arith.cmpi slt, %192, %47 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc43)
        %196 = arith.select %195, %192, %cst {tt.contiguity = dense<256> : tensor<1xi32>, tt.divisibility = dense<256> : tensor<1xi32>} : tensor<256xi1, #ttg.slice<{dim = 0, parent = #blocked}>>, tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc44)
        scf.yield %178, %184, %186, %194, %196 : i32, i32, i32, tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc44)
      } else {
        scf.yield %arg11, %arg12, %arg13, %arg15, %arg16 : i32, i32, i32, tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
      } loc(#loc54)
      %129 = arith.addi %arg19, %c1_i32 : i32 loc(#loc28)
      %130 = arith.cmpi slt, %129, %c3_i32 : i32 loc(#loc28)
      %131 = arith.select %130, %129, %c0_i32 : i32 loc(#loc28)
      %132 = ttg.memdesc_subview %27[%131, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 3x128x64> loc(#loc26)
      %133 = ttg.async_wait %arg20 {num = 2 : i32} loc(#loc26)
      %134 = ttg.memdesc_subview %28[%131, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable, 3x64x256> loc(#loc27)
      %135 = ttng.warp_group_dot %132, %134, %arg14, %arg17 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 3x128x64> * !ttg.memdesc<64x256xf16, #shared1, #smem, mutable, 3x64x256> -> tensor<128x256xf32, #mma> loc(#loc62)
      %136:3 = ttng.warp_group_dot_wait %135, %132, %134 {pendings = 1 : i32} : tensor<128x256xf32, #mma>, !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x256xf16, #shared1, #smem, mutable, 3x64x256> loc(#loc62)
      %137 = arith.addi %arg18, %c1_i32 : i32 loc(#loc28)
      %138 = arith.cmpi slt, %137, %c3_i32 : i32 loc(#loc28)
      %139 = arith.select %138, %137, %c0_i32 : i32 loc(#loc28)
      %140 = arith.muli %126, %c64_i32 : i32 loc(#loc56)
      %141 = tt.splat %140 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc57)
      %142 = tt.splat %140 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc57)
      %143 = arith.addi %141, %12 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc57)
      %144 = arith.addi %142, %13 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc57)
      %145 = tt.expand_dims %128#3 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc45)
      %146 = arith.muli %145, %21 : tensor<128x1xi32, #blocked1> loc(#loc20)
      %147 = tt.expand_dims %143 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc58)
      %148 = tt.broadcast %146 : tensor<128x1xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc46)
      %149 = tt.broadcast %147 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc46)
      %150 = arith.addi %148, %149 : tensor<128x64xi32, #blocked1> loc(#loc46)
      %151 = tt.addptr %22, %150 : tensor<128x64x!tt.ptr<f16>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc21)
      %152 = tt.expand_dims %144 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc59)
      %153 = tt.expand_dims %128#4 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc47)
      %154 = arith.muli %153, %23 : tensor<1x256xi32, #blocked> loc(#loc22)
      %155 = tt.broadcast %152 : tensor<64x1xi32, #blocked> -> tensor<64x256xi32, #blocked> loc(#loc48)
      %156 = tt.broadcast %154 : tensor<1x256xi32, #blocked> -> tensor<64x256xi32, #blocked> loc(#loc48)
      %157 = arith.addi %155, %156 : tensor<64x256xi32, #blocked> loc(#loc48)
      %158 = tt.addptr %24, %157 : tensor<64x256x!tt.ptr<f16>, #blocked>, tensor<64x256xi32, #blocked> loc(#loc23)
      %159 = arith.subi %arg5, %140 : i32 loc(#loc60)
      %160 = tt.splat %159 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc49)
      %161 = arith.cmpi slt, %25, %160 : tensor<1x64xi32, #blocked1> loc(#loc49)
      %162 = tt.broadcast %161 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc26)
      %163 = ttg.memdesc_subview %27[%139, %c0_i32, %c0_i32] : !ttg.memdesc<3x128x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 3x128x64> loc(#loc26)
      %164 = tt.splat %123 : i1 -> tensor<128x64xi1, #blocked1> loc(#loc28)
      %165 = arith.andi %164, %162 : tensor<128x64xi1, #blocked1> loc(#loc28)
      %166 = ttg.async_copy_global_to_local %151, %163 mask %165 other %cst_1 : tensor<128x64x!tt.ptr<f16>, #blocked1> -> <128x64xf16, #shared, #smem, mutable, 3x128x64> loc(#loc26)
      %167 = ttg.async_commit_group %166 loc(#loc26)
      %168 = tt.splat %159 : i32 -> tensor<64x1xi32, #blocked> loc(#loc50)
      %169 = arith.cmpi slt, %26, %168 : tensor<64x1xi32, #blocked> loc(#loc50)
      %170 = tt.broadcast %169 : tensor<64x1xi1, #blocked> -> tensor<64x256xi1, #blocked> loc(#loc27)
      %171 = ttg.memdesc_subview %28[%139, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable, 3x64x256> loc(#loc27)
      %172 = tt.splat %123 : i1 -> tensor<64x256xi1, #blocked> loc(#loc28)
      %173 = arith.andi %172, %170 : tensor<64x256xi1, #blocked> loc(#loc28)
      %174 = ttg.async_copy_global_to_local %158, %171 mask %173 other %cst_2 : tensor<64x256x!tt.ptr<f16>, #blocked> -> <64x256xf16, #shared1, #smem, mutable, 3x64x256> loc(#loc27)
      %175 = ttg.async_commit_group %174 loc(#loc27)
      %176 = arith.cmpi eq, %arg22, %20 : i32 loc(#loc63)
      %177 = arith.cmpi ne, %arg22, %20 : i32 loc(#loc87)
      scf.if %176 {
        %178:3 = ttng.warp_group_dot_wait %136#0, %132, %134 {pendings = 0 : i32} : tensor<128x256xf32, #mma>, !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x256xf16, #shared1, #smem, mutable, 3x64x256> loc(#loc62)
        %179 = arith.muli %arg24, %c128_i32 : i32 loc(#loc65)
        %180 = tt.splat %179 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc66)
        %181 = arith.addi %180, %16 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc66)
        %182 = arith.muli %arg26, %c256_i32 : i32 loc(#loc67)
        %183 = tt.splat %182 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc68)
        %184 = arith.addi %183, %18 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc68)
        %185 = tt.expand_dims %181 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc69)
        %186 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc70)
        %187 = arith.muli %186, %185 : tensor<128x1xi32, #blocked2> loc(#loc70)
        %188 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<128x1x!tt.ptr<f16>, #blocked2> loc(#loc71)
        %189 = tt.addptr %188, %187 : tensor<128x1x!tt.ptr<f16>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc71)
        %190 = tt.expand_dims %184 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc72)
        %191 = tt.broadcast %189 : tensor<128x1x!tt.ptr<f16>, #blocked2> -> tensor<128x256x!tt.ptr<f16>, #blocked2> loc(#loc73)
        %192 = tt.broadcast %190 : tensor<1x256xi32, #blocked2> -> tensor<128x256xi32, #blocked2> loc(#loc73)
        %193 = tt.addptr %191, %192 : tensor<128x256x!tt.ptr<f16>, #blocked2>, tensor<128x256xi32, #blocked2> loc(#loc73)
        %194 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc74)
        %195 = arith.cmpi slt, %185, %194 : tensor<128x1xi32, #blocked2> loc(#loc74)
        %196 = tt.splat %arg4 : i32 -> tensor<1x256xi32, #blocked2> loc(#loc75)
        %197 = arith.cmpi slt, %190, %196 : tensor<1x256xi32, #blocked2> loc(#loc75)
        %198 = tt.broadcast %195 : tensor<128x1xi1, #blocked2> -> tensor<128x256xi1, #blocked2> loc(#loc76)
        %199 = tt.broadcast %197 : tensor<1x256xi1, #blocked2> -> tensor<128x256xi1, #blocked2> loc(#loc76)
        %200 = arith.andi %198, %199 : tensor<128x256xi1, #blocked2> loc(#loc76)
        %201 = arith.truncf %178#0 : tensor<128x256xf32, #mma> to tensor<128x256xf16, #mma> loc(#loc77)
        %202 = ttg.convert_layout %201 : tensor<128x256xf16, #mma> -> tensor<128x256xf16, #blocked2> loc(#loc78)
        tt.store %193, %202, %200 : tensor<128x256x!tt.ptr<f16>, #blocked2> loc(#loc78)
      } loc(#loc64)
      scf.yield %126, %128#0, %128#1, %128#2, %136#0, %128#3, %128#4, %177, %139, %131, %arg21, %175, %arg23, %126, %arg25, %128#1, %arg27, %128#2 : i32, i32, i32, i32, tensor<128x256xf32, #mma>, tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>, tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>>, i1, i32, i32, !ttg.async.token, !ttg.async.token, i32, i32, i32, i32, i32, i32 loc(#loc28)
    } loc(#loc28)
    %120 = ttng.warp_group_dot_wait %119#4 {pendings = 0 : i32} : tensor<128x256xf32, #mma> loc(#loc28)
    %121 = ttg.async_wait  {num = 0 : i32} loc(#loc28)
    ttg.local_dealloc %27 : !ttg.memdesc<3x128x64xf16, #shared, #smem, mutable> loc(#loc28)
    ttg.local_dealloc %28 : !ttg.memdesc<3x64x256xf16, #shared1, #smem, mutable> loc(#loc28)
    tt.return loc(#loc79)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":166:30)
#loc3 = loc("/root/.pyenv/versions/3.11.8/lib/python3.11/site-packages/triton/language/standard.py":40:22)
#loc4 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":167:27)
#loc5 = loc("/root/.pyenv/versions/3.11.8/lib/python3.11/site-packages/triton/language/standard.py":40:28)
#loc6 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":168:27)
#loc7 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":169:25)
#loc8 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":170:28)
#loc9 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":172:32)
#loc10 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":173:31)
#loc11 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":173:19)
#loc12 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":173:7)
#loc13 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":174:24)
#loc14 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":179:35)
#loc15 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":181:38)
#loc16 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":185:27)
#loc17 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":186:27)
#loc18 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":190:32)
#loc19 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":191:38)
#loc20 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":209:45)
#loc21 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":209:26)
#loc22 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":210:75)
#loc23 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":210:26)
#loc24 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":212:49)
#loc25 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":213:49)
#loc26 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":212:20)
#loc27 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":213:20)
#loc28 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":190:22)
#loc29 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":194:34)
#loc30 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":195:37)
#loc31 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":196:43)
#loc32 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":196:56)
#loc33 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":197:45)
#loc34 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":197:35)
#loc35 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":198:31)
#loc36 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":198:52)
#loc37 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":200:30)
#loc38 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":201:30)
#loc39 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":202:32)
#loc40 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":203:32)
#loc41 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":204:41)
#loc42 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":204:53)
#loc43 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":205:41)
#loc44 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":205:53)
#loc45 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":209:34)
#loc46 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":209:57)
#loc47 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":210:64)
#loc48 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":210:56)
#loc49 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":212:60)
#loc50 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":213:60)
#loc51 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":191:44)
#loc52 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":191:28)
#loc53 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":192:17)
#loc54 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":192:11)
#loc55 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":193:23)
#loc56 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":208:22)
#loc57 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":208:37)
#loc58 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":209:64)
#loc59 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":210:33)
#loc60 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":212:64)
#loc61 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":191:49)
#loc62 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":214:35)
#loc63 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":216:17)
#loc64 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":216:11)
#loc65 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":217:30)
#loc66 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":217:45)
#loc67 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":218:30)
#loc68 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":218:45)
#loc69 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":219:49)
#loc70 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":219:41)
#loc71 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":219:29)
#loc72 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":219:80)
#loc73 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":219:60)
#loc74 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":220:41)
#loc75 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":220:66)
#loc76 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":220:47)
#loc77 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":224:35)
#loc78 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":225:29)
#loc79 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":190:4)
#loc80 = loc(callsite(#loc3 at #loc4))
#loc81 = loc(callsite(#loc5 at #loc4))
#loc82 = loc(callsite(#loc3 at #loc6))
#loc83 = loc(callsite(#loc5 at #loc6))
#loc84 = loc(callsite(#loc3 at #loc7))
#loc85 = loc(callsite(#loc5 at #loc7))
#loc86 = loc(fused[#loc51, #loc52])
#loc87 = loc(fused[#loc64, #loc63])

