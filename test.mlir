#loc = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0)
module {
  tt.func public @matmul_kernel_persistent(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":155:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x256xf32> loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x256xf16> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xf16> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c132_i32 = arith.constant 132 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<256xi32> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<128xi32> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c127_i32 : i32 loc(#loc63)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc64)
    %3 = arith.addi %arg4, %c255_i32 : i32 loc(#loc65)
    %4 = arith.divsi %3, %c256_i32 : i32 loc(#loc66)
    %5 = arith.addi %arg5, %c63_i32 : i32 loc(#loc67)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc68)
    %7 = arith.muli %2, %4 : i32 loc(#loc8)
    %8 = arith.muli %4, %c8_i32 : i32 loc(#loc9)
    %9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc10)
    %10 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc11)
    %11 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc12)
    %12 = tt.splat %arg3 : i32 -> tensor<128xi32> loc(#loc13)
    %13 = tt.splat %arg4 : i32 -> tensor<256xi32> loc(#loc14)
    %14 = tt.splat %arg6 : i32 -> tensor<128x1xi32> loc(#loc15)
    %15 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>> loc(#loc16)
    %16 = tt.splat %arg7 : i32 -> tensor<1x256xi32> loc(#loc17)
    %17 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x256x!tt.ptr<f16>> loc(#loc18)
    %18 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc19)
    %19 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc20)
    %20 = tt.splat %arg8 : i32 -> tensor<128x1xi32> loc(#loc21)
    %21 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<128x1x!tt.ptr<f16>> loc(#loc22)
    %22 = tt.splat %arg3 : i32 -> tensor<128x1xi32> loc(#loc23)
    %23 = tt.splat %arg4 : i32 -> tensor<1x256xi32> loc(#loc24)
    scf.for %arg9 = %0 to %7 step %c132_i32  : i32 {
      %24 = arith.divsi %arg9, %8 : i32 loc(#loc26)
      %25 = arith.muli %24, %c8_i32 : i32 loc(#loc27)
      %26 = arith.subi %2, %25 : i32 loc(#loc28)
      %27 = arith.minsi %26, %c8_i32 : i32 loc(#loc29)
      %28 = arith.remsi %arg9, %27 : i32 loc(#loc30)
      %29 = arith.addi %25, %28 : i32 loc(#loc31)
      %30 = arith.remsi %arg9, %8 : i32 loc(#loc32)
      %31 = arith.divsi %30, %27 : i32 loc(#loc33)
      %32 = arith.muli %29, %c128_i32 : i32 loc(#loc34)
      %33 = arith.muli %31, %c256_i32 : i32 loc(#loc35)
      %34 = tt.splat %32 : i32 -> tensor<128xi32> loc(#loc36)
      %35 = arith.addi %34, %10 : tensor<128xi32> loc(#loc36)
      %36 = tt.splat %33 : i32 -> tensor<256xi32> loc(#loc37)
      %37 = arith.addi %36, %11 : tensor<256xi32> loc(#loc37)
      %38 = arith.cmpi slt, %35, %12 : tensor<128xi32> loc(#loc13)
      %39 = arith.select %38, %35, %cst_3 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi1>, tensor<128xi32> loc(#loc38)
      %40 = arith.cmpi slt, %37, %13 : tensor<256xi32> loc(#loc14)
      %41 = arith.select %40, %37, %cst_2 {tt.contiguity = dense<256> : tensor<1xi32>, tt.divisibility = dense<256> : tensor<1xi32>} : tensor<256xi1>, tensor<256xi32> loc(#loc39)
      %42 = tt.expand_dims %39 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc40)
      %43 = arith.muli %42, %14 : tensor<128x1xi32> loc(#loc15)
      %44 = tt.broadcast %43 : tensor<128x1xi32> -> tensor<128x64xi32> loc(#loc41)
      %45 = tt.expand_dims %41 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc42)
      %46 = arith.muli %45, %16 : tensor<1x256xi32> loc(#loc17)
      %47 = tt.broadcast %46 : tensor<1x256xi32> -> tensor<64x256xi32> loc(#loc43)
      %48 = scf.for %arg10 = %c0_i32 to %6 step %c1_i32 iter_args(%arg11 = %cst) -> (tensor<128x256xf32>)  : i32 {
        %62 = arith.muli %arg10, %c64_i32 : i32 loc(#loc45)
        %63 = tt.splat %62 : i32 -> tensor<64xi32> loc(#loc46)
        %64 = arith.addi %63, %9 : tensor<64xi32> loc(#loc46)
        %65 = tt.expand_dims %64 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc47)
        %66 = tt.broadcast %65 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc41)
        %67 = arith.addi %44, %66 : tensor<128x64xi32> loc(#loc41)
        %68 = tt.addptr %15, %67 : tensor<128x64x!tt.ptr<f16>>, tensor<128x64xi32> loc(#loc16)
        %69 = tt.expand_dims %64 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc48)
        %70 = tt.broadcast %69 : tensor<64x1xi32> -> tensor<64x256xi32> loc(#loc43)
        %71 = arith.addi %70, %47 : tensor<64x256xi32> loc(#loc43)
        %72 = tt.addptr %17, %71 : tensor<64x256x!tt.ptr<f16>>, tensor<64x256xi32> loc(#loc18)
        %73 = arith.subi %arg5, %62 : i32 loc(#loc49)
        %74 = tt.splat %73 : i32 -> tensor<1x64xi32> loc(#loc50)
        %75 = arith.cmpi slt, %18, %74 : tensor<1x64xi32> loc(#loc50)
        %76 = tt.broadcast %75 : tensor<1x64xi1> -> tensor<128x64xi1> loc(#loc51)
        %77 = tt.load %68, %76, %cst_1 : tensor<128x64x!tt.ptr<f16>> loc(#loc51)
        %78 = tt.splat %73 : i32 -> tensor<64x1xi32> loc(#loc52)
        %79 = arith.cmpi slt, %19, %78 : tensor<64x1xi32> loc(#loc52)
        %80 = tt.broadcast %79 : tensor<64x1xi1> -> tensor<64x256xi1> loc(#loc53)
        %81 = tt.load %72, %80, %cst_0 : tensor<64x256x!tt.ptr<f16>> loc(#loc53)
        %82 = tt.dot %77, %81, %arg11, inputPrecision = tf32 : tensor<128x64xf16> * tensor<64x256xf16> -> tensor<128x256xf32> loc(#loc54)
        scf.yield %82 : tensor<128x256xf32> loc(#loc55)
      } loc(#loc44)
      %49 = tt.expand_dims %35 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc56)
      %50 = arith.muli %20, %49 : tensor<128x1xi32> loc(#loc21)
      %51 = tt.addptr %21, %50 : tensor<128x1x!tt.ptr<f16>>, tensor<128x1xi32> loc(#loc22)
      %52 = tt.expand_dims %37 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc57)
      %53 = tt.broadcast %51 : tensor<128x1x!tt.ptr<f16>> -> tensor<128x256x!tt.ptr<f16>> loc(#loc58)
      %54 = tt.broadcast %52 : tensor<1x256xi32> -> tensor<128x256xi32> loc(#loc58)
      %55 = tt.addptr %53, %54 : tensor<128x256x!tt.ptr<f16>>, tensor<128x256xi32> loc(#loc58)
      %56 = arith.cmpi slt, %49, %22 : tensor<128x1xi32> loc(#loc23)
      %57 = arith.cmpi slt, %52, %23 : tensor<1x256xi32> loc(#loc24)
      %58 = tt.broadcast %56 : tensor<128x1xi1> -> tensor<128x256xi1> loc(#loc59)
      %59 = tt.broadcast %57 : tensor<1x256xi1> -> tensor<128x256xi1> loc(#loc59)
      %60 = arith.andi %58, %59 : tensor<128x256xi1> loc(#loc59)
      %61 = arith.truncf %48 : tensor<128x256xf32> to tensor<128x256xf16> loc(#loc60)
      tt.store %55, %61, %60 : tensor<128x256x!tt.ptr<f16>> loc(#loc61)
    } loc(#loc25)
    tt.return loc(#loc62)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":166:30)
#loc3 = loc("/root/.pyenv/versions/3.11.8/lib/python3.11/site-packages/triton/language/standard.py":40:22)
#loc4 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":167:27)
#loc5 = loc("/root/.pyenv/versions/3.11.8/lib/python3.11/site-packages/triton/language/standard.py":40:28)
#loc6 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":168:27)
#loc7 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":169:25)
#loc8 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":170:28)
#loc9 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":171:38)
#loc10 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":173:35)
#loc11 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":184:41)
#loc12 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":185:41)
#loc13 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":186:37)
#loc14 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":187:37)
#loc15 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":194:49)
#loc16 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":194:30)
#loc17 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":195:79)
#loc18 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":195:30)
#loc19 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":197:53)
#loc20 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":198:53)
#loc21 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":203:37)
#loc22 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":203:25)
#loc23 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":204:37)
#loc24 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":204:62)
#loc25 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":175:47)
#loc26 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":176:30)
#loc27 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":177:33)
#loc28 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":178:39)
#loc29 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":178:52)
#loc30 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":179:41)
#loc31 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":179:31)
#loc32 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":180:27)
#loc33 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":180:48)
#loc34 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":182:26)
#loc35 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":183:26)
#loc36 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":184:28)
#loc37 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":185:28)
#loc38 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":186:49)
#loc39 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":187:49)
#loc40 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":194:38)
#loc41 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":194:61)
#loc42 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":195:68)
#loc43 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":195:60)
#loc44 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":192:24)
#loc45 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":193:26)
#loc46 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":193:41)
#loc47 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":194:68)
#loc48 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":195:37)
#loc49 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":197:68)
#loc50 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":197:64)
#loc51 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":197:24)
#loc52 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":198:64)
#loc53 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":198:24)
#loc54 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":199:39)
#loc55 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":199:12)
#loc56 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":203:45)
#loc57 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":203:76)
#loc58 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":203:56)
#loc59 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":204:43)
#loc60 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":208:31)
#loc61 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":209:25)
#loc62 = loc("/root/code/triton/python/tutorials/09-persistent-matmul.py":175:4)
#loc63 = loc(callsite(#loc3 at #loc4))
#loc64 = loc(callsite(#loc5 at #loc4))
#loc65 = loc(callsite(#loc3 at #loc6))
#loc66 = loc(callsite(#loc5 at #loc6))
#loc67 = loc(callsite(#loc3 at #loc7))
#loc68 = loc(callsite(#loc5 at #loc7))
